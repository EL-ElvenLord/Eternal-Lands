.PHONY: clean release static gen_git_version docs

# IMPORTANT: Dev-C++ doesn't seem to get this right, so you have to copy
# make.defaults to build/make.conf manually if you don't have the latter

BUILD_DIR = ./build

DEPS_MAGIC := $(shell mkdir -p $(BUILD_DIR))

-include $(BUILD_DIR)/make.conf

# basic compiling and linking - rarely changed
OPTIONS = -DWINDOWS -DELC -DWINVER=0x500 -mwindows $(foreach FEATURE, $(FEATURES), -D$(FEATURE)) -D_7ZIP_ST
CFLAGS=$(PLATFORM) $(CWARN) -O0 -ggdb -pipe $(OPTIONS) -fno-strict-aliasing $(EXTRA_INCLUDES)
_CFLAGS=$(PLATFORM) -O2 -fomit-frame-pointer -ffast-math -pipe $(OPTIONS) -DNDEBUG -fno-strict-aliasing $(EXTRA_INCLUDES)
CXXFLAGS=$(PLATFORM) $(CXXWARN) -O0 -ggdb -pipe $(OPTIONS) -fno-strict-aliasing $(EXTRA_INCLUDES)
_CXXFLAGS=$(PLATFORM) -O3 -fomit-frame-pointer -ffast-math -pipe $(OPTIONS) -DNDEBUG -fno-strict-aliasing $(EXTRA_INCLUDES)

# WARNING: the order is important! If -lX uses -lY, then you must list -lX before -lY (sic!)
LDFLAGS= $(EXTRA_LIBS) $(foreach FEATURE, $(FEATURES), $($(FEATURE)_LIBS)) \
	-llibxml2 -lSDL_net -lSDL_image -lsdl -lopenal32 -lglu32 -lopengl32 -liconv -lcal3d -lm -lstdc++ \
	-lz -lpng -lvorbisfile -lvorbis -logg
_LDFLAGS=-lopengl32 -lz
STATICLIBS=libs/libSDL_net.a libs/libSDL.a libs/libSDL_image.a libs/libopenal.a libs/libvorbisfile.a libs/libvorbis.a libs/libogg.a libs/libxml2.a libs/libcal3d.a libs/libpng.a libs/libasound.a $(EXTRA_STATICLIBS)

# set where we will find source files
VPATH = ./src/ ./src/engine/ ./src/exceptions/ ./src/eye_candy/ ./src/fsaa/ ./src/io/ ./src/pawn/ ./src/shader/ ./src/xml/ ./src/xz/

# features enable/disbled in make.defaults
#ENCYCLOPEDIA_C_SOURCE = fontdef.c parser.c symbol.c typesetter.c sort.c symbol_table.c
MEMORY_DEBUG_C_SOURCE = elmemory.c
PAWN_C_SOURCE = amx.c amxaux.c amxcons.c amxel.c amxfloat.c amxstring.c elpawn.c
CUSTOM_UPDATE_C_SOURCE = custom_update.c new_update.c
#disabled it for now, made too much trouble
#FSAA_C_SOURCE = fsaa_glx.c fsaa.c
FSAA_C_SOURCE = fsaa_dummy.c fsaa.c

C_SOURCE = 2d_objects.c 3d_objects.c actor_scripts.c actors.c alphamap.c asc.c astrology.c bags.c \
	bbox_tree.c books.c buddy.c buffs.c cache.c calc.c cal.c chat.c cluster.c colors.c \
	console.c consolewin.c counters.c cursors.c ddsimage.c dds.c dialogues.c draw_scene.c \
	elconfig.c el_memory.c elwindows.c emotes.c encyclopedia.c errors.c events.c \
	eye_candy_debugwin.c filter.c font.c framebuffer.c frustum.c gamewin.c gl_init.c hash.c \
	help.c highlight.c hud_misc_window.c hud.c hud_quickbar_window.c hud_quickspells_window.c \
	hud_statsbar_window.c ignore.c image_loading.c image.c init.c interface.c items.c keys.c \
	knowledge.c langselwin.c lights.c list.c load_gl_extensions.c loading_win.c loginwin.c \
	main.c makeargv.c manufacture.c map.c mapwin.c md5.c mines.c minimap.c misc.c missiles.c \
	multiplayer.c new_actors.c new_character.c notepad.c openingwin.c particles.c paste.c \
	pathfinder.c pm_log.c popup.c queue.c reflection.c rules.c serverpopup.c servers.c \
	session.c shadows.c skeletons.c skills.c sky.c sound.c special_effects.c spells.c stats.c \
	storage.c tabs.c text_aliases.c text.c textures.c tile_map.c timers.c trade.c translate.c \
	update.c url.c weather.c widgets.c \
	e3d_io.c elc_io.c map_io.c elfilewrapper.c elpathwrapper.c fileutil.c half.c \
	ioapi.c normal.c unzip.c xmlcallbacks.c zip.c ziputil.c \
	noise.c shader.c \
	7zCrc.c 7zCrcOpt.c Alloc.c Bra86.c Bra.c BraIA64.c CpuArch.c Delta.c LzFind.c \
	Lzma2Dec.c Lzma2Enc.c LzmaDec.c LzmaEnc.c Sha256.c Xz.c XzCrc64.c XzDec.c XzEnc.c \
	$(foreach FEATURE, $(FEATURES), $($(FEATURE)_C_SOURCE))

CXX_SOURCE = achievements.cpp actor_init.cpp cal3d_wrapper.cpp command_queue.cpp context_menu.cpp \
	elloggingwrapper.cpp eye_candy_wrapper.cpp hud_indicators.cpp hud_timer.cpp icon_window.cpp \
	item_info.cpp item_lists.cpp named_colours.cpp optimizer.cpp quest_log.cpp select.cpp \
	sendvideoinfo.cpp trade_log.cpp user_menus.cpp \
	cal3d_io_wrapper.cpp \
	effect_bag.cpp effect_breath.cpp effect_campfire.cpp effect_candle.cpp effect_cloud.cpp \
	effect_firefly.cpp effect_fountain.cpp effect_glow.cpp effect_harvesting.cpp effect_impact.cpp \
	effect_lamp.cpp effect_mines.cpp effect_missile.cpp effect_ongoing.cpp effect_selfmagic.cpp \
	effect_smoke.cpp effect_staff.cpp effect_summon.cpp effect_sword.cpp effect_targetmagic.cpp \
	effect_teleporter.cpp effect_wind.cpp eye_candy.cpp kepler_orbit.cpp math_cache.cpp orbital_mover.cpp \
	hardwarebuffer.cpp logging.cpp \
	extendedexception.cpp \
	xmlhelper.cpp \
	$(foreach FEATURE, $(FEATURES), $($(FEATURE)_CXX_SOURCE))

OBJS=$(COBJS) $(CXXOBJS)
COBJS = $(C_SOURCE:%.c=$(BUILD_DIR)/%.o)
CXXOBJS = $(CXX_SOURCE:%.cpp=$(BUILD_DIR)/%.o)
DEP_FILES=$(foreach OBJ, $(COBJS), $(OBJ).P) $(foreach OBJ, $(CXXOBJS), $(OBJ).P)
EXE=el.exe

ifndef CC
CC=gcc.exe
endif
ifndef CXX
CXX=g++.exe
endif
ifndef LINK
LINK=gcc.exe
endif

TMP_LIB = $(BUILD_DIR)/libelc.a

# the compile targets
all: $(EXE)

# work around command line length restriction
$(TMP_LIB): $(OBJS)
	@echo AR $@
	@rm -f $@
	@ar cq $@ $(filter $(BUILD_DIR)/2%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/3%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/7%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/a%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/A%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/b%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/B%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/c%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/C%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/d%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/D%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/e%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/f%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/g%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/h%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/i%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/j%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/k%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/l%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/L%, $(OBJS))
	@ar q $@ $(filter-out $(BUILD_DIR)/main.o, $(filter $(BUILD_DIR)/m%, $(OBJS)))
	@ar q $@ $(filter $(BUILD_DIR)/n%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/o%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/p%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/q%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/r%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/R%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/s%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/S%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/t%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/T%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/u%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/v%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/w%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/x%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/X%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/y%, $(OBJS))
	@ar q $@ $(filter $(BUILD_DIR)/z%, $(OBJS))
	@ranlib $@

$(EXE): $(BUILD_DIR)/main.o $(TMP_LIB)
	@echo LINK $@
	@windres src/elc_private.rc $(BUILD_DIR)/elc_private.o
	@$(LINK) $(CFLAGS) $< -L$(BUILD_DIR) -lelc $(LDFLAGS) $(BUILD_DIR)/elc_private.o -o $(EXE)
	@strip -s $(EXE)

$(COBJS): $(BUILD_DIR)/%.o: %.c Makefile.win $(BUILD_DIR)/make.conf
	@echo CC $<
	@$(CC) $(CFLAGS) -MT '$@' -MD -MP -MF '$@.P' -c $< -o $@

$(CXXOBJS): $(BUILD_DIR)/%.o: %.cpp Makefile.win $(BUILD_DIR)/make.conf
	@echo CXX $<
	@$(CXX) $(CXXFLAGS) -MT '$@' -MD -MP -MF '$@.P' -c $< -o $@

release:
	@$(MAKE) -f Makefile.win 'CFLAGS=$(_CFLAGS)' 'CXXFLAGS=$(_CXXFLAGS)'

static:
	@$(MAKE) -f Makefile.win 'CFLAGS=$(_CFLAGS)' 'CXXFLAGS=$(_CXXFLAGS)' 'LDFLAGS=$(_LDFLAGS)' 'OBJS=$(OBJS) $(STATICLIBS) -lstdc++ -lGL -lGLU'

clean:
	rm -f $(OBJS) $(EXE) $(DEP_FILES) $(TMP_LIB) $(BUILD_DIR)/elc_private.o

docs:
	cd docs && doxygen Doxyfile

$(BUILD_DIR)/make.conf: make.defaults
	@$(error "Need to copy $< to $@)

pawn_scripts/features.inc: $(BUILD_DIR)/make.conf
	echo "#if defined _features_included" > $@; \
	echo "\t#endinput" >> $@; \
	echo "#endif" >> $@; \
	echo "#define _features_included" >> $@; \
	for feature in $(FEATURES); do \
		echo "#define $$feature" >> $@; \
	done

-include $(DEP_FILES)
