.PHONY: clean release static gen_git_version docs

BUILD_DIR = ./build

DEPS_MAGIC := $(shell mkdir -p $(BUILD_DIR))

-include $(BUILD_DIR)/make.conf

# basic compiling and linking - rarely changed
OPTIONS = -DLINUX -DELC $(foreach FEATURE, $(FEATURES), -D$(FEATURE)) -D_7ZIP_ST $(GIT_VERSION)
CFLAGS=$(PLATFORM) $(CWARN) -O0 -ggdb -pipe $(OPTIONS) $(shell sdl-config --cflags) $(shell xml2-config --cflags) -fno-strict-aliasing $(EXTRA_INCLUDES)
_CFLAGS=$(PLATFORM) -O2 -fomit-frame-pointer -ffast-math -pipe $(OPTIONS) $(shell sdl-config --cflags) $(shell xml2-config --cflags) -fno-strict-aliasing $(EXTRA_INCLUDES)
CXXFLAGS=$(PLATFORM) $(CXXWARN) -O0 -ggdb -pipe $(OPTIONS) $(shell sdl-config --cflags) $(shell xml2-config --cflags) -fno-strict-aliasing $(EXTRA_INCLUDES)
_CXXFLAGS=$(PLATFORM) -O3 -fomit-frame-pointer -ffast-math -pipe $(OPTIONS) $(shell sdl-config --cflags) $(shell xml2-config --cflags) -fno-strict-aliasing $(EXTRA_INCLUDES)

PNG_SCREENSHOT_LIBS = -lpng
LDFLAGS=$(shell sdl-config --libs) $(shell xml2-config --libs) -lSDL_net \
	-lSDL_image -lopenal $(XDIR) -lGL -lGLU -lcal3d -lm $(EXTRA_LIBS) \
	-lz -lpng -lvorbis -lvorbisfile -lstdc++ -lX11 \
	$(foreach FEATURE, $(FEATURES), $($(FEATURE)_LIBS))
_LDFLAGS=$(XDIR) -lGL -lpthread -lstdc++

# This works on Ubuntu 8.04 (LTS) at least
# Install these packages in addition to those required for a standard build
# libasound2-dev libaudio-dev libartsc0-dev libesd0-dev libpulse-dev libaa1-dev libgpmg1-dev libdirectfb-dev
LIBD=/usr/lib
STATICLIBS=$(LIBD)/libSDL_net.a $(LIBD)/libSDL.a $(LIBD)/libSDL_image.a $(LIBD)/libopenal.a $(LIBD)/libvorbisfile.a $(LIBD)/libvorbis.a $(LIBD)/libogg.a $(LIBD)/libxml2.a $(LIBD)/libcal3d.a $(LIBD)/libpng.a $(LIBD)/libasound.a $(LIBD)/libaudio.a $(LIBD)/libartsc.a $(LIBD)/libesd.a $(LIBD)/libpulse-simple.a $(LIBD)/libpulse.a $(LIBD)/libaa.a $(LIBD)/libgpm.a $(LIBD)/libcurses.a $(LIBD)/libslang.a $(LIBD)/libdirectfb.a $(LIBD)/libdirect.a $(LIBD)/libfusion.a $(LIBD)/librt.a $(LIBD)/libtiff.a $(LIBD)/libjpeg.a $(LIBD)/libGLU.a $(LIBD)/libz.a

# set where we will find source files
VPATH=./src/ ./src/engine/ ./src/exceptions/ ./src/eye_candy/ ./src/fsaa/ ./src/io/ ./src/pawn/ ./src/shader/ ./src/xml/ ./src/xz/

# features enable/disbled in make.defaults
#ENCYCLOPEDIA_C_SOURCE = fontdef.c parser.c symbol.c typesetter.c sort.c symbol_table.c
MEMORY_DEBUG_C_SOURCE = elmemory.c
PAWN_C_SOURCE = amx.c amxaux.c amxcons.c amxel.c amxfloat.c amxstring.c elpawn.c
CUSTOM_UPDATE_C_SOURCE = custom_update.c new_update.c
#disabled it for now, made too much trouble
#FSAA_C_SOURCE = fsaa_glx.c fsaa.c
FSAA_C_SOURCE = fsaa_dummy.c fsaa.c

C_SOURCE = 2d_objects.c 3d_objects.c actor_scripts.c actors.c alphamap.c asc.c astrology.c bags.c \
	bbox_tree.c books.c buddy.c buffs.c cache.c calc.c cal.c chat.c cluster.c colors.c \
	console.c consolewin.c counters.c cursors.c ddsimage.c dds.c dialogues.c draw_scene.c \
	elconfig.c el_memory.c elwindows.c emotes.c encyclopedia.c errors.c events.c \
	eye_candy_debugwin.c filter.c font.c framebuffer.c frustum.c gamewin.c gl_init.c hash.c \
	help.c highlight.c hud_misc_window.c hud.c hud_quickbar_window.c hud_quickspells_window.c \
	hud_statsbar_window.c ignore.c image_loading.c image.c init.c interface.c items.c keys.c \
	knowledge.c langselwin.c lights.c list.c load_gl_extensions.c loading_win.c loginwin.c \
	main.c makeargv.c manufacture.c map.c mapwin.c md5.c mines.c minimap.c misc.c missiles.c \
	multiplayer.c new_actors.c new_character.c notepad.c openingwin.c particles.c paste.c \
	pathfinder.c pm_log.c popup.c queue.c reflection.c rules.c serverpopup.c servers.c \
	session.c shadows.c skeletons.c skills.c sky.c sound.c special_effects.c spells.c stats.c \
	storage.c tabs.c text_aliases.c text.c textures.c tile_map.c timers.c trade.c translate.c \
	update.c url.c weather.c widgets.c \
	e3d_io.c elc_io.c map_io.c elfilewrapper.c elpathwrapper.c fileutil.c half.c \
	ioapi.c normal.c unzip.c xmlcallbacks.c zip.c ziputil.c \
	noise.c shader.c \
	7zCrc.c 7zCrcOpt.c Alloc.c Bra86.c Bra.c BraIA64.c CpuArch.c Delta.c LzFind.c \
	Lzma2Dec.c Lzma2Enc.c LzmaDec.c LzmaEnc.c Sha256.c Xz.c XzCrc64.c XzDec.c XzEnc.c \
	$(foreach FEATURE, $(FEATURES), $($(FEATURE)_C_SOURCE))

CXX_SOURCE = achievements.cpp actor_init.cpp cal3d_wrapper.cpp command_queue.cpp context_menu.cpp \
	elloggingwrapper.cpp eye_candy_wrapper.cpp hud_indicators.cpp hud_timer.cpp icon_window.cpp \
	item_info.cpp item_lists.cpp named_colours.cpp optimizer.cpp quest_log.cpp select.cpp \
	sendvideoinfo.cpp trade_log.cpp user_menus.cpp \
	cal3d_io_wrapper.cpp \
	effect_bag.cpp effect_breath.cpp effect_campfire.cpp effect_candle.cpp effect_cloud.cpp \
	effect_firefly.cpp effect_fountain.cpp effect_glow.cpp effect_harvesting.cpp effect_impact.cpp \
	effect_lamp.cpp effect_mines.cpp effect_missile.cpp effect_ongoing.cpp effect_selfmagic.cpp \
	effect_smoke.cpp effect_staff.cpp effect_summon.cpp effect_sword.cpp effect_targetmagic.cpp \
	effect_teleporter.cpp effect_wind.cpp eye_candy.cpp kepler_orbit.cpp math_cache.cpp orbital_mover.cpp \
	hardwarebuffer.cpp logging.cpp \
	extendedexception.cpp \
	xmlhelper.cpp \
	$(foreach FEATURE, $(FEATURES), $($(FEATURE)_CXX_SOURCE))

OBJS=$(COBJS) $(CXXOBJS)
COBJS = $(C_SOURCE:%.c=$(BUILD_DIR)/%.o)
CXXOBJS = $(CXX_SOURCE:%.cpp=$(BUILD_DIR)/%.o)
DEP_FILES=$(foreach OBJ, $(COBJS), $(OBJ).P) $(foreach OBJ, $(CXXOBJS), $(OBJ).P)
EXE=el.x86.linux.bin

ifndef CC
CC=gcc
endif
ifndef CXX
CXX=g++
endif
ifndef LINK
LINK=gcc
endif

all: $(EXE)

# the compile targets
$(EXE): $(OBJS)
	@echo "  LINK $(EXE)"
	@$(LINK) $(CFLAGS) -o $(EXE) $(OBJS) $(LDFLAGS)

$(COBJS): $(BUILD_DIR)/%.o: %.c Makefile.linux $(BUILD_DIR)/make.conf
	@echo "  CC   $<"
	@if $(CC) $(CFLAGS) -MT '$@' -MD -MP -MF '$@.pp' -c $< -o $@; then \
		mv "$@.pp" "$@.P"; \
	else rm -f "$@.pp"; exit 1; \
	fi

$(CXXOBJS): $(BUILD_DIR)/%.o: %.cpp Makefile.linux $(BUILD_DIR)/make.conf
	@echo "  CXX  $<"
	@if $(CXX) $(CXXFLAGS) -MT '$@' -MD -MP -MF '$@.pp' -c $< -o $@; then \
		mv "$@.pp" "$@.P"; \
	else rm -f "$@.pp"; exit 1; \
	fi

release:
	@$(MAKE) -f Makefile.linux 'CFLAGS=$(_CFLAGS)' 'CXXFLAGS=$(_CXXFLAGS)'

static:
	@$(MAKE) -f Makefile.linux 'CFLAGS=$(_CFLAGS)' 'CXXFLAGS=$(_CXXFLAGS)' 'LDFLAGS=$(_LDFLAGS)' 'OBJS=$(OBJS) $(STATICLIBS)'

clean:
	rm -f $(OBJS) $(EXE) $(DEP_FILES) $(BUILD_DIR)/make.conf $(BUILD_DIR)/git_version
	rmdir --ignore-fail-on-non-empty $(BUILD_DIR)/

docs:
	cd docs && doxygen Doxyfile

# define GIT_VERSION if we have a version file
VTMP := $(shell [ -r $(BUILD_DIR)/git_version ] && cat $(BUILD_DIR)/git_version)
ifdef VTMP
GIT_VERSION = -DGIT_VERSION=\"$(VTMP)\"
endif

# generate the git_version file
VERSION = $(shell git describe --abbrev=4 --dirty --always)
gen_git_version:
	@echo -n "$(VERSION)" > $(BUILD_DIR)/git_version
	@echo "New version file: $(VERSION)"
	@rm -f $(BUILD_DIR)/console.o $(EXE)

$(BUILD_DIR)/make.conf: make.defaults
	@if (test -f $@ -a '$(UPDATE_CONF)' != 'yes'); \
	then \
		echo '**'; \
		echo '* WARNING: $< is newer than $@!'; \
		echo '* Proceeding in 10 seconds, hit Ctrl-C to abort...'; \
		echo '*'; \
		sleep 10; \
	else \
		cp $< $@; \
	fi

pawn_scripts/features.inc: $(BUILD_DIR)/make.conf
	echo "#if defined _features_included" > $@; \
	echo "\t#endinput" >> $@; \
	echo "#endif" >> $@; \
	echo "#define _features_included" >> $@; \
	for feature in $(FEATURES); do \
		echo "#define $$feature" >> $@; \
	done

-include $(DEP_FILES)
